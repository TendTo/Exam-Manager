/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IExamContract, IExamContractInterface } from "../IExamContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "AddressAlreadyInUseError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "studentId",
        type: "uint256",
      },
    ],
    name: "SubjectAlreadyAcceptedError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "studentId",
        type: "uint256",
      },
    ],
    name: "SubjectNotAcceptableError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "testIdx",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "studentId",
        type: "uint256",
      },
    ],
    name: "TestAlreadyAcceptedError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "testIdx",
        type: "uint8",
      },
    ],
    name: "TestDoesNotExistsError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "testIdx",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "expiration",
        type: "uint256",
      },
    ],
    name: "TestExpiredError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "testIdx",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "studentId",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "mark",
        type: "uint8",
      },
    ],
    name: "TestNotAcceptableError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "testIdx",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "studentId",
        type: "uint256",
      },
    ],
    name: "TestNotTakenError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
      {
        internalType: "address",
        name: "unauthorizedAdmin",
        type: "address",
      },
    ],
    name: "UnauthorizedAdminError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "unauthorizedAddr",
        type: "address",
      },
    ],
    name: "UnauthorizedProfessorError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "profAddr",
        type: "address",
      },
    ],
    name: "AuthorizedProfAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "studentId",
        type: "uint256",
      },
    ],
    name: "MissingSubjectRequrements",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "testIdx",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "studentId",
        type: "uint256",
      },
    ],
    name: "MissingTestRequirements",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "studentId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "mark",
        type: "uint8",
      },
    ],
    name: "SubjectAccepted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "studentId",
        type: "uint256",
      },
    ],
    name: "SubjectResetted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "testIdx",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "studentId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "mark",
        type: "uint8",
      },
    ],
    name: "TestFailed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "testIdx",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "studentId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "mark",
        type: "uint8",
      },
    ],
    name: "TestPassed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "testIdx",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "studentId",
        type: "uint256",
      },
    ],
    name: "TestRejected",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "testIdx",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "studentId",
        type: "uint256",
      },
    ],
    name: "TestResetted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
    ],
    name: "acceptSubjectResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "profAddr",
        type: "address",
      },
    ],
    name: "addAuthorizedProf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "addStudent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "cfu",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "requiredCount",
        type: "uint8",
      },
      {
        internalType: "uint256[]",
        name: "subjectIdToUnlock",
        type: "uint256[]",
      },
    ],
    name: "addSubject",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "deleteStudent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "studentId",
        type: "uint256",
      },
    ],
    name: "getSubjectMark",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "enum IExamContract.Status",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
    ],
    name: "getSubjectTests",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "expiresIn",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "minMark",
            type: "uint8",
          },
          {
            internalType: "uint8[][]",
            name: "testIdxRequired",
            type: "uint8[][]",
          },
          {
            internalType: "uint8[]",
            name: "testIdxReset",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "testIdxResetOnTake",
            type: "uint8[]",
          },
        ],
        internalType: "struct IExamContract.Test[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "testIdx",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "studentId",
        type: "uint256",
      },
    ],
    name: "getTestMark",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "enum IExamContract.Status",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "profAddr",
        type: "address",
      },
    ],
    name: "isProfAuthorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "studentId",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "mark",
            type: "uint8",
          },
        ],
        internalType: "struct IExamContract.StudentMark[]",
        name: "subjectResults",
        type: "tuple[]",
      },
    ],
    name: "registerSubjectResults",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "testIdx",
        type: "uint8",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "studentId",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "mark",
            type: "uint8",
          },
        ],
        internalType: "struct IExamContract.StudentMark[]",
        name: "testResults",
        type: "tuple[]",
      },
    ],
    name: "registerTestResults",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "testIdx",
        type: "uint8",
      },
    ],
    name: "rejectTestResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "profAddr",
        type: "address",
      },
    ],
    name: "removeAuthorizedProf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
    ],
    name: "removeSubject",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
    ],
    name: "resetSubject",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subjectId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "expiresIn",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "minMark",
            type: "uint8",
          },
          {
            internalType: "uint8[][]",
            name: "testIdxRequired",
            type: "uint8[][]",
          },
          {
            internalType: "uint8[]",
            name: "testIdxReset",
            type: "uint8[]",
          },
          {
            internalType: "uint8[]",
            name: "testIdxResetOnTake",
            type: "uint8[]",
          },
        ],
        internalType: "struct IExamContract.Test[]",
        name: "tests",
        type: "tuple[]",
      },
    ],
    name: "setSubjectTests",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IExamContract__factory {
  static readonly abi = _abi;
  static createInterface(): IExamContractInterface {
    return new utils.Interface(_abi) as IExamContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IExamContract {
    return new Contract(address, _abi, signerOrProvider) as IExamContract;
  }
}

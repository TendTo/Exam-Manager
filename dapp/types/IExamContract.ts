/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IExamContract {
  export type TestStruct = {
    name: PromiseOrValue<string>;
    expiresIn: PromiseOrValue<BigNumberish>;
    minMark: PromiseOrValue<BigNumberish>;
    testIdxRequired: PromiseOrValue<BigNumberish>[][];
    testIdxReset: PromiseOrValue<BigNumberish>[];
    testIdxResetOnTake: PromiseOrValue<BigNumberish>[];
  };

  export type TestStructOutput = [
    string,
    BigNumber,
    number,
    number[][],
    number[],
    number[]
  ] & {
    name: string;
    expiresIn: BigNumber;
    minMark: number;
    testIdxRequired: number[][];
    testIdxReset: number[];
    testIdxResetOnTake: number[];
  };

  export type StudentMarkStruct = {
    studentId: PromiseOrValue<BigNumberish>;
    mark: PromiseOrValue<BigNumberish>;
  };

  export type StudentMarkStructOutput = [BigNumber, number] & {
    studentId: BigNumber;
    mark: number;
  };
}

export interface IExamContractInterface extends utils.Interface {
  functions: {
    "acceptSubjectResult(uint256)": FunctionFragment;
    "addAuthorizedProf(uint256,address)": FunctionFragment;
    "addStudent(address,uint256)": FunctionFragment;
    "addSubject(uint256,string,uint8,uint8,uint256[])": FunctionFragment;
    "deleteStudent(address)": FunctionFragment;
    "getSubjectMark(uint256)": FunctionFragment;
    "getSubjectTests(uint256)": FunctionFragment;
    "getTestMark(uint256,uint8)": FunctionFragment;
    "isProfAuthorized(uint256,address)": FunctionFragment;
    "registerSubjectResults(uint256,(uint256,uint8)[])": FunctionFragment;
    "registerTestResults(uint256,uint8,(uint256,uint8)[])": FunctionFragment;
    "rejectTestResult(uint256,uint8)": FunctionFragment;
    "removeAuthorizedProf(uint256,address)": FunctionFragment;
    "removeSubject(uint256)": FunctionFragment;
    "resetSubject(uint256)": FunctionFragment;
    "setSubjectTests(uint256,(string,uint256,uint8,uint8[][],uint8[],uint8[])[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptSubjectResult"
      | "addAuthorizedProf"
      | "addStudent"
      | "addSubject"
      | "deleteStudent"
      | "getSubjectMark"
      | "getSubjectTests"
      | "getTestMark"
      | "isProfAuthorized"
      | "registerSubjectResults"
      | "registerTestResults"
      | "rejectTestResult"
      | "removeAuthorizedProf"
      | "removeSubject"
      | "resetSubject"
      | "setSubjectTests"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptSubjectResult",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorizedProf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addStudent",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addSubject",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteStudent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubjectMark",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubjectTests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTestMark",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isProfAuthorized",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSubjectResults",
    values: [PromiseOrValue<BigNumberish>, IExamContract.StudentMarkStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTestResults",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IExamContract.StudentMarkStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectTestResult",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedProf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSubject",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetSubject",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubjectTests",
    values: [PromiseOrValue<BigNumberish>, IExamContract.TestStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptSubjectResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorizedProf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStudent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addSubject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubjectMark",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubjectTests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTestMark",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProfAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSubjectResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTestResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectTestResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedProf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSubject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetSubject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubjectTests",
    data: BytesLike
  ): Result;

  events: {
    "MissingSubjectRequrements(uint256,uint256)": EventFragment;
    "MissingTestRequirements(uint256,uint8,uint256)": EventFragment;
    "SubjectAccepted(uint256,uint256,uint8)": EventFragment;
    "SubjectResetted(uint256,uint256)": EventFragment;
    "TestFailed(uint256,uint8,uint256,uint8)": EventFragment;
    "TestPassed(uint256,uint8,uint256,uint8)": EventFragment;
    "TestRejected(uint256,uint8,uint256)": EventFragment;
    "TestResetted(uint256,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MissingSubjectRequrements"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MissingTestRequirements"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubjectAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubjectResetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TestFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TestPassed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TestRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TestResetted"): EventFragment;
}

export interface MissingSubjectRequrementsEventObject {
  subjectId: BigNumber;
  studentId: BigNumber;
}
export type MissingSubjectRequrementsEvent = TypedEvent<
  [BigNumber, BigNumber],
  MissingSubjectRequrementsEventObject
>;

export type MissingSubjectRequrementsEventFilter =
  TypedEventFilter<MissingSubjectRequrementsEvent>;

export interface MissingTestRequirementsEventObject {
  subjectId: BigNumber;
  testIdx: number;
  studentId: BigNumber;
}
export type MissingTestRequirementsEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  MissingTestRequirementsEventObject
>;

export type MissingTestRequirementsEventFilter =
  TypedEventFilter<MissingTestRequirementsEvent>;

export interface SubjectAcceptedEventObject {
  subjectId: BigNumber;
  studentId: BigNumber;
  mark: number;
}
export type SubjectAcceptedEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  SubjectAcceptedEventObject
>;

export type SubjectAcceptedEventFilter = TypedEventFilter<SubjectAcceptedEvent>;

export interface SubjectResettedEventObject {
  subjectId: BigNumber;
  studentId: BigNumber;
}
export type SubjectResettedEvent = TypedEvent<
  [BigNumber, BigNumber],
  SubjectResettedEventObject
>;

export type SubjectResettedEventFilter = TypedEventFilter<SubjectResettedEvent>;

export interface TestFailedEventObject {
  subjectId: BigNumber;
  testIdx: number;
  studentId: BigNumber;
  mark: number;
}
export type TestFailedEvent = TypedEvent<
  [BigNumber, number, BigNumber, number],
  TestFailedEventObject
>;

export type TestFailedEventFilter = TypedEventFilter<TestFailedEvent>;

export interface TestPassedEventObject {
  subjectId: BigNumber;
  testIdx: number;
  studentId: BigNumber;
  mark: number;
}
export type TestPassedEvent = TypedEvent<
  [BigNumber, number, BigNumber, number],
  TestPassedEventObject
>;

export type TestPassedEventFilter = TypedEventFilter<TestPassedEvent>;

export interface TestRejectedEventObject {
  subjectId: BigNumber;
  testIdx: number;
  studentId: BigNumber;
}
export type TestRejectedEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  TestRejectedEventObject
>;

export type TestRejectedEventFilter = TypedEventFilter<TestRejectedEvent>;

export interface TestResettedEventObject {
  subjectId: BigNumber;
  testIdx: number;
  studentId: BigNumber;
}
export type TestResettedEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  TestResettedEventObject
>;

export type TestResettedEventFilter = TypedEventFilter<TestResettedEvent>;

export interface IExamContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExamContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptSubjectResult(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addAuthorizedProf(
      subjectId: PromiseOrValue<BigNumberish>,
      profAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addStudent(
      addr: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSubject(
      subjectId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      cfu: PromiseOrValue<BigNumberish>,
      requiredCount: PromiseOrValue<BigNumberish>,
      subjectIdToUnlock: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteStudent(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSubjectMark(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    getSubjectTests(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IExamContract.TestStructOutput[]]>;

    getTestMark(
      subjectId: PromiseOrValue<BigNumberish>,
      testIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    isProfAuthorized(
      subjectId: PromiseOrValue<BigNumberish>,
      profAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerSubjectResults(
      subjectId: PromiseOrValue<BigNumberish>,
      subjectResults: IExamContract.StudentMarkStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerTestResults(
      subjectId: PromiseOrValue<BigNumberish>,
      testIdx: PromiseOrValue<BigNumberish>,
      testResults: IExamContract.StudentMarkStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectTestResult(
      subjectId: PromiseOrValue<BigNumberish>,
      testIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAuthorizedProf(
      subjectId: PromiseOrValue<BigNumberish>,
      profAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeSubject(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetSubject(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSubjectTests(
      subjectId: PromiseOrValue<BigNumberish>,
      tests: IExamContract.TestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptSubjectResult(
    subjectId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addAuthorizedProf(
    subjectId: PromiseOrValue<BigNumberish>,
    profAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addStudent(
    addr: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSubject(
    subjectId: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    cfu: PromiseOrValue<BigNumberish>,
    requiredCount: PromiseOrValue<BigNumberish>,
    subjectIdToUnlock: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteStudent(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSubjectMark(
    subjectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  getSubjectTests(
    subjectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IExamContract.TestStructOutput[]>;

  getTestMark(
    subjectId: PromiseOrValue<BigNumberish>,
    testIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  isProfAuthorized(
    subjectId: PromiseOrValue<BigNumberish>,
    profAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerSubjectResults(
    subjectId: PromiseOrValue<BigNumberish>,
    subjectResults: IExamContract.StudentMarkStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerTestResults(
    subjectId: PromiseOrValue<BigNumberish>,
    testIdx: PromiseOrValue<BigNumberish>,
    testResults: IExamContract.StudentMarkStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectTestResult(
    subjectId: PromiseOrValue<BigNumberish>,
    testIdx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAuthorizedProf(
    subjectId: PromiseOrValue<BigNumberish>,
    profAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeSubject(
    subjectId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetSubject(
    subjectId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSubjectTests(
    subjectId: PromiseOrValue<BigNumberish>,
    tests: IExamContract.TestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptSubjectResult(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addAuthorizedProf(
      subjectId: PromiseOrValue<BigNumberish>,
      profAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addStudent(
      addr: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSubject(
      subjectId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      cfu: PromiseOrValue<BigNumberish>,
      requiredCount: PromiseOrValue<BigNumberish>,
      subjectIdToUnlock: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    deleteStudent(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getSubjectMark(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    getSubjectTests(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IExamContract.TestStructOutput[]>;

    getTestMark(
      subjectId: PromiseOrValue<BigNumberish>,
      testIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    isProfAuthorized(
      subjectId: PromiseOrValue<BigNumberish>,
      profAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerSubjectResults(
      subjectId: PromiseOrValue<BigNumberish>,
      subjectResults: IExamContract.StudentMarkStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerTestResults(
      subjectId: PromiseOrValue<BigNumberish>,
      testIdx: PromiseOrValue<BigNumberish>,
      testResults: IExamContract.StudentMarkStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    rejectTestResult(
      subjectId: PromiseOrValue<BigNumberish>,
      testIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAuthorizedProf(
      subjectId: PromiseOrValue<BigNumberish>,
      profAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSubject(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    resetSubject(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubjectTests(
      subjectId: PromiseOrValue<BigNumberish>,
      tests: IExamContract.TestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MissingSubjectRequrements(uint256,uint256)"(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null
    ): MissingSubjectRequrementsEventFilter;
    MissingSubjectRequrements(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null
    ): MissingSubjectRequrementsEventFilter;

    "MissingTestRequirements(uint256,uint8,uint256)"(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      testIdx?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null
    ): MissingTestRequirementsEventFilter;
    MissingTestRequirements(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      testIdx?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null
    ): MissingTestRequirementsEventFilter;

    "SubjectAccepted(uint256,uint256,uint8)"(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null,
      mark?: null
    ): SubjectAcceptedEventFilter;
    SubjectAccepted(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null,
      mark?: null
    ): SubjectAcceptedEventFilter;

    "SubjectResetted(uint256,uint256)"(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null
    ): SubjectResettedEventFilter;
    SubjectResetted(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null
    ): SubjectResettedEventFilter;

    "TestFailed(uint256,uint8,uint256,uint8)"(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      testIdx?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null,
      mark?: null
    ): TestFailedEventFilter;
    TestFailed(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      testIdx?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null,
      mark?: null
    ): TestFailedEventFilter;

    "TestPassed(uint256,uint8,uint256,uint8)"(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      testIdx?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null,
      mark?: null
    ): TestPassedEventFilter;
    TestPassed(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      testIdx?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null,
      mark?: null
    ): TestPassedEventFilter;

    "TestRejected(uint256,uint8,uint256)"(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      testIdx?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null
    ): TestRejectedEventFilter;
    TestRejected(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      testIdx?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null
    ): TestRejectedEventFilter;

    "TestResetted(uint256,uint8,uint256)"(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      testIdx?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null
    ): TestResettedEventFilter;
    TestResetted(
      subjectId?: PromiseOrValue<BigNumberish> | null,
      testIdx?: PromiseOrValue<BigNumberish> | null,
      studentId?: PromiseOrValue<BigNumberish> | null
    ): TestResettedEventFilter;
  };

  estimateGas: {
    acceptSubjectResult(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addAuthorizedProf(
      subjectId: PromiseOrValue<BigNumberish>,
      profAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addStudent(
      addr: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSubject(
      subjectId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      cfu: PromiseOrValue<BigNumberish>,
      requiredCount: PromiseOrValue<BigNumberish>,
      subjectIdToUnlock: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteStudent(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSubjectMark(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubjectTests(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTestMark(
      subjectId: PromiseOrValue<BigNumberish>,
      testIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProfAuthorized(
      subjectId: PromiseOrValue<BigNumberish>,
      profAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerSubjectResults(
      subjectId: PromiseOrValue<BigNumberish>,
      subjectResults: IExamContract.StudentMarkStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerTestResults(
      subjectId: PromiseOrValue<BigNumberish>,
      testIdx: PromiseOrValue<BigNumberish>,
      testResults: IExamContract.StudentMarkStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectTestResult(
      subjectId: PromiseOrValue<BigNumberish>,
      testIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAuthorizedProf(
      subjectId: PromiseOrValue<BigNumberish>,
      profAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeSubject(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetSubject(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSubjectTests(
      subjectId: PromiseOrValue<BigNumberish>,
      tests: IExamContract.TestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptSubjectResult(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addAuthorizedProf(
      subjectId: PromiseOrValue<BigNumberish>,
      profAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addStudent(
      addr: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSubject(
      subjectId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      cfu: PromiseOrValue<BigNumberish>,
      requiredCount: PromiseOrValue<BigNumberish>,
      subjectIdToUnlock: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteStudent(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSubjectMark(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubjectTests(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTestMark(
      subjectId: PromiseOrValue<BigNumberish>,
      testIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProfAuthorized(
      subjectId: PromiseOrValue<BigNumberish>,
      profAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerSubjectResults(
      subjectId: PromiseOrValue<BigNumberish>,
      subjectResults: IExamContract.StudentMarkStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerTestResults(
      subjectId: PromiseOrValue<BigNumberish>,
      testIdx: PromiseOrValue<BigNumberish>,
      testResults: IExamContract.StudentMarkStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectTestResult(
      subjectId: PromiseOrValue<BigNumberish>,
      testIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAuthorizedProf(
      subjectId: PromiseOrValue<BigNumberish>,
      profAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeSubject(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetSubject(
      subjectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSubjectTests(
      subjectId: PromiseOrValue<BigNumberish>,
      tests: IExamContract.TestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
